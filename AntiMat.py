#                _             __  __           _       _                
#      /\       | |           |  \/  |         | |     | |               
#     /  \   ___| |_ _ __ ___ | \  / | ___   __| |_   _| | ___  ___      
#    / /\ \ / __| __| '__/ _ \| |\/| |/ _ \ / _` | | | | |/ _ \/ __|     
#   / ____ \\__ \ |_| | | (_) | |  | | (_) | (_| | |_| | |  __/\__ \     
#  /_/    \_\___/\__|_|  \___/|_|  |_|\___/ \__,_|\__,_|_|\___||___/     
#                                                                        
#                         ¬© Copyright 2022                               
#                                                                        
#                https://t.me/Den4ikSuperOstryyPer4ik                    
#                              and                                       
#                      https://t.me/ToXicUse                             
#                                                                         
#                 üîí Licensed under the GNU AGPLv3                       
#             https://www.gnu.org/licenses/agpl-3.0.html                 
#                                                                                                                 
# meta developer: @AstroModules
from .. import loader, utils
from telethon.tl.types import Message


class AntiMatMod(loader.Module):
	'''–ú–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–∞—Å—Ç –≤–∞–º —Å–º–∞—Ç–µ—Ä–∏—Ç—å—Å—è)'''

	strings = {
		"name": "–ê–Ω—Ç–∏-–ú–∞—Ç",
		"am_on": "ü§¨ <b>Antimat enabled.</b>",
		"am_off": "ü§¨ <b>Antimat disabled.</b>",
		"action_text": "What action should be taken when a swear word is found in a message?",
		"list_txt": 'Here you can add your mats.\np.s.: add one mat at a time',
	}

	strings_ru = {
		"am_on": "ü§¨ <b>–ê–Ω—Ç–∏–º–∞—Ç –≤–∫–ª—é—á–µ–Ω.</b>",
		"am_off": "ü§¨ <b>–ê–Ω—Ç–∏–º–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω.</b>",
		"action_text": "–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –º–∞—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏?",
		"list_txt": "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –º–∞—Ç—ã.\np.s.: –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –º–∞—Ç—É",
	}


	def __init__(self):
		self.config = loader.ModuleConfig(
			loader.ConfigValue(
				"list",
				"—Ö–µ—Ä, —Ö—Ä–µ–Ω, —Ö—É–π, –ø–∏–∑–¥–∞, –±–ª—è, –ø–æ—Ö, –Ω–∞—Ö, –µ–±–ª–∞–Ω, –µ–±–∞, —à–ª—é—Ö–∞, —Å—É–∫–∞, —É–µ–±–∞–Ω, –ø–∑–¥—Ü, –ø–∏–∑–¥–µ—Ü, –ø–∏–∑–¥–æ—Å, —Ö—É—é, –¥–æ–ª–±–æ–µ–±, –ø–∏–¥–æ—Ä, –≥–∞–Ω–¥–æ–Ω, —Ö—É—è",
				doc=lambda: self.strings("list_txt"),
				validator=loader.validators.Series()
			),
		)


	@loader.command()
	async def antimat(self, message: Message):
		'''- –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–∏–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –ê–Ω—Ç–∏–ú–∞—Ç'''
		antimat = self.db.get(
			"am_status",
			"antimat",
		)
		if antimat == "":
			self.db.set("am_status", "antimat", False)
		if antimat == False:
			self.db.set("am_status", "antimat", True)
			await utils.answer(message, self.strings("am_on"))
		else:
			self.db.set("am_status", "antimat", False)
			await utils.answer(message, self.strings("am_off"))

	@loader.command()
	async def matlist(self, message: Message):
		"""- –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç–æ–≤

		ü§´ –ê–≤—Ç–æ—Ä –º–æ–¥—É–ª—è –Ω–µ –æ—á–µ–Ω—å –ª—é–±–∏—Ç –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è. –í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ."""
		await self.allmodules.commands["config"](
					await utils.answer(message, f"{self.get_prefix()}config –ê–Ω—Ç–∏-–ú–∞—Ç")
				)

	@loader.watcher(out=True)
	async def watcher(self, message: Message):
		txt = message.text
		antimat = self.db.get(
			"am_status",
			"antimat",
		)
		mats = self.config['list']
		if antimat == False:
			return
		if antimat == True:
			for mat in mats:
				m = txt.lower().find(mat)
				if m != -1:
					await message.edit("<emoji document_id=5213285132709929474>ü§¨</emoji> <b>–ù–µ –º–∞—Ç–µ—Ä–∏—Å—å!</b>")

