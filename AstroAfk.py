__version__ = (2, 0, 0)
#                _             __  __           _       _                
#      /\       | |           |  \/  |         | |     | |               
#     /  \   ___| |_ _ __ ___ | \  / | ___   __| |_   _| | ___  ___      
#    / /\ \ / __| __| '__/ _ \| |\/| |/ _ \ / _` | | | | |/ _ \/ __|     
#   / ____ \\__ \ |_| | | (_) | |  | | (_) | (_| | |_| | |  __/\__ \     
#  /_/    \_\___/\__|_|  \___/|_|  |_|\___/ \__,_|\__,_|_|\___||___/     
#                                                                        
#                         ¬© Copyright 2023                             
#                                                                        
#                https://t.me/Den4ikSuperOstryyPer4ik                    
#                              and                                       
#                      https://t.me/ToXicUse                             
#                                                                         
#                 üîí Licensed under the GNU AGPLv3                       
#             https://www.gnu.org/licenses/agpl-3.0.html                 
#                   
# meta banner: https://0x0.st/oFwG.jpg                                                                                            
# meta developer: @AstroModules
# meta designer: @XizurK

import time
import logging
import datetime
from telethon import types
from .. import loader, utils
from ..inline.types import InlineCall
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest

logger = logging.getLogger(__name__)


class AstroAfkMod(loader.Module):
	"""–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É—Ö–æ–¥–∞ –≤ –ê–§–ö —Ä–µ–∂–∏–º! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ TxAFK!"""

	async def client_ready(self, client, db):
		self._db = db
		self._me = await client.get_me()

	strings = {
		"name": "AstroAFK",

		"lname": "| afk.",
		"lname0": " ",

		"bt_off_afk": "‚ö†Ô∏è –ê–§–ö —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω",
		"bt_on_afk": "üí§ –ê–§–ö —Ä–µ–∂–∏–º —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω",

		"_cfg_cst_btn": "–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –ê–§–ö. –ß—Ç–æ–±—ã –≤–æ–≤—Å–µ —É–±—Ä–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ None",
		"feedback_bot__text": "–Æ–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ feedback –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ—Ç—É - –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ",
		"button__text": "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ê–§–ö —Ä–µ–∂–∏–º–∞?",
		"custom_text__afk_text": "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –∞—Ñ–∫. –ò—Å–ø–æ–ª—å–∑—É–π {time} –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏",
	}

	def render_settings(self):
		active = self._db.get(__name__, 'afk')
		if active == True:
			a_active = "–í–∫–ª—é—á–µ–Ω ‚úÖ"
		else:
			a_active = '–í—ã–∫–ª—é—á–µ–Ω üö´'
		change_bio = self._db.get(__name__, 'change_bio')
		if change_bio == True:
			a_change_bio = '–î–∞'
		else:
			a_change_bio = '–ù–µ—Ç'
		change_name = self._db.get(__name__, 'change_name')
		if change_name == True:
			a_change_name = '–î–∞'
		else:
			a_change_name = '–ù–µ—Ç'
		fb = self.config['feedback_bot']
		text = (
			f'ü•∑üèº <b>TxAFK</b>\n'
			f'‚îú<b>{a_active}</b>\n'
			f'<b>‚îú–°–º–µ–Ω–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏:</b> <code>{a_change_bio}</code> üìñ\n'
			f'<b>‚îú–°–º–µ–Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞:</b> <code>{a_change_name}</code> üìù\n'
			f'<b>‚îî–ë–æ—Ç –¥–ª—è —Å–≤—è–∑–∏:</b> <code>@{fb}</code> ü§ñ'
		)
		return text


	def __init__(self):
		self.config = loader.ModuleConfig(
			loader.ConfigValue(
				"prefix",
				'| afk.',
				doc=lambda: '–ü—Ä–µ—Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –∏–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –ê–§–ö'
			),
			loader.ConfigValue(
				"feedback_bot",
				None,
				doc=lambda: self.strings("feedback_bot__text"),
			),
			loader.ConfigValue(
				"custom_text__afk",
				"None",
				doc=lambda: self.strings("custom_text__afk_text"),
			),
			loader.ConfigValue(
				"custom_button",
				[
					"ü¶Ñ AstroModules ü¶Ñ",
					"https://t.me/AstroModulesChat",
				],
				lambda: self.strings("_cfg_cst_btn"),
				validator=loader.validators.Union(
					loader.validators.Series(fixed_len=2),
					loader.validators.NoneType(),
				),
			),
			loader.ConfigValue(
				"ignore_chats",
				[],
				lambda: "–ß–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö TxAF–ö –Ω–µ –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å",
				validator=loader.validators.Series(
                    validator=loader.validators.Union(
                        loader.validators.TelegramID(),
                        loader.validators.RegExp("[0-9]"),
                    ),
                ),
			),
			loader.ConfigValue(
				"button",
				True,
				doc=lambda: self.strings("button__text"),
				validator=loader.validators.Boolean(),
			)

		)

	def _afk_custom_text(self) -> str:
		now = datetime.datetime.now().replace(microsecond=0)
		gone = datetime.datetime.fromtimestamp(
			self._db.get(__name__, "gone")
		).replace(microsecond=0)

		time = now - gone

		return (
			"<b> </b>\n"
			+ self.config["custom_text__afk"].format(
				time=time,
			)
		)

	@loader.command()
	async def asst(self, message):
		"""- –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è"""
		
		await self.inline.form(message=message, text='<b>‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>', reply_markup=[{'text': 'üî¥ –û—Ç–∫—Ä—ã—Ç—å', 'callback': self.settings}])

	@loader.command()
	async def goafk(self, message):
		"""- –≤–æ–π—Ç–∏ –≤ –ê–§–ö —Ä–µ–∂–∏–º"""
		try:
			user_id = (
				(
					(
						await self._client.get_entity(
							args if not args.isdigit() else int(args)
						)
					).id
				)
				if args
				else reply.sender_id
			)
		except Exception:
			user_id = self._tg_id
		user = await self._client(GetFullUserRequest(user_id))
		
		self._db.set(__name__, "afk", True)
		self._db.set(__name__, "gone", time.time())
		self._db.set(__name__, "ratelimit", [])
		change_bio = self._db.get(__name__, "change_bio")
		change_name = self._db.get(__name__, "change_name")

		try:
			ls = user.full_user.last_name
		except:
			ls = ''
		about = user.full_user.about

		self._db.set(__name__, 'about', about)
		self._db.set(__name__, "ln", ls)

		if change_name == False and change_bio == False:
			await utils.answer(message, '<emoji document_id=5188391205909569136>‚úÖ</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ <b>–≤–∫–ª—é—á–µ–Ω</b>!')
			return

		if change_name == True:
			prefix = self.config['prefix']
			last_name = f'{ls} {prefix}'
			await message.client(UpdateProfileRequest(last_name=last_name))

		if change_bio == True:
			if self.config['feedback_bot'] == None:
				await message.client(UpdateProfileRequest(about='–ù–∞—Ö–æ–∂—É—Å—å –≤ –∞—Ñ–∫.', last_name=self.config['prefix']))
			else:
				a_afk_bio = '–ù–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ, –Ω–∞—Ö–æ–∂—É—Å—å –≤ –∞—Ñ–∫. –°–≤—è–∑—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑: '
				feedback = self.config['feedback_bot']
				await message.client(UpdateProfileRequest(about=f'{a_afk_bio} {feedback}'))

		await utils.answer(message, '<emoji document_id=5188391205909569136>‚úÖ</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ <b>–≤–∫–ª—é—á–µ–Ω</b>!')
		

	@loader.command()
	async def ungoafk(self, message):
		"""- –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ê–§–ö"""

		self._db.set(__name__, "afk", False)
		self._db.set(__name__, "gone", None)
		self._db.set(__name__, "ratelimit", [])
		change_bio = self._db.get(__name__, "change_bio")
		change_name = self._db.get(__name__, "change_name")

		if change_name == False and change_bio == False:
			await utils.answer(message, '<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ <b>–≤—ã–∫–ª—é—á–µ–Ω</b>!')
			return

		if change_name == True:
			ls = self._db.get(__name__, 'ln')
			await message.client(UpdateProfileRequest(last_name=ls))

		if change_bio == True:
			try:
				await message.client(UpdateProfileRequest(about=f'{self.db.get(__name__, "about")}'))
			except:
				await message.client(UpdateProfileRequest(about="@AstroOfftop - –ª—É—á—à–∏–π —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è."))
		await utils.answer(message, '<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ <b>–≤—ã–∫–ª—é—á–µ–Ω</b>!')
		await self.allmodules.log("TxAFK now stoped.")


	@loader.watcher()
	async def watcher(self, message):
		if not isinstance(message, types.Message):
			return
		if utils.get_chat_id(message) in self.config['ignore_chats']: 
			return
		if message.mentioned or getattr(message.to_id, "user_id", None) == self._me.id:
			afk_state = self.get_afk()
			if not afk_state:
				return
			logger.debug("tagged!")
			ratelimit = self._db.get(__name__, "ratelimit", [])
			if utils.get_chat_id(message) in ratelimit:
				return
			else:
				self._db.setdefault(__name__, {}).setdefault("ratelimit", []).append(
					utils.get_chat_id(message)
				)
				self._db.save()
			user = await utils.get_user(message)
			if user.is_self or user.bot or user.verified:
				logger.debug("User is self, bot or verified.")
				return
			if self.get_afk() is False:
				return
			now = datetime.datetime.now().replace(microsecond=0)
			gone = datetime.datetime.fromtimestamp(
				self._db.get(__name__, "gone")
			).replace(microsecond=0)
			time = now - gone
			if self.config['custom_button'] == None:
				if self.config["button"] == False:
					if self.config["custom_text__afk"] == None:
						await self.inline.form(message=message, text=f"<b>üîÖ –Ø —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å –≤ –ê–§–ö.</b>\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª –≤ —Å–µ—Ç–∏ <code>{time}</code> –Ω–∞–∑–∞–¥.")
					else:
						await self.inline.form(message=message, text=self._afk_custom_text())
				
				elif self.config['button'] == True:
					if self.config["custom_text__afk"] == None:
						await self.inline.form(
							message=message, 
							text=f"<b>üîÖ –Ø —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å –≤ –ê–§–ö.</b>\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª –≤ —Å–µ—Ç–∏ <code>{time}</code> –Ω–∞–∑–∞–¥.", 
							reply_markup=[
								[
									{
										"text": "üö´ –í—ã–π—Ç–∏ —Å –∞—Ñ–∫ üö´", 
										"callback": self.button_cancel,
									}
								]
							]
						)

					else:
						await self.inline.form(
							message=message, 
							text=self._afk_custom_text(), 
							reply_markup=[
								[
									{
										"text": "üö´ –í—ã–π—Ç–∏ —Å –∞—Ñ–∫ üö´", 
										"callback": self.button_cancel,
									}
								]
							]
						)
			else:
				if self.config["button"] == False:
					if self.config["custom_text__afk"] == None:
						await self.inline.form(message=message, text=f"<b>üîÖ –Ø —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å –≤ –ê–§–ö.</b>\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª –≤ —Å–µ—Ç–∏ <code>{time}</code> –Ω–∞–∑–∞–¥.", reply_markup=[{"text": self.config['custom_button'][0], "url": self.config['custom_button'][1]}])
					else:
						await self.inline.form(message=message, text=self._afk_custom_text(), reply_markup=[{"text": self.config['custom_button'][0], "url": self.config['custom_button'][1]}])
				
				elif self.config['button'] == True:
					if self.config["custom_text__afk"] == None:
						await self.inline.form(
							message=message, 
							text=f"<b>üîÖ –Ø —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å –≤ –ê–§–ö.</b>\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª –≤ —Å–µ—Ç–∏ <code>{time}</code> –Ω–∞–∑–∞–¥.", 
							reply_markup=[
								[
									{
										"text": self.config['custom_button'][0],
										"url": self.config['custom_button'][1],
									}
								],
								[
									{
										"text": "üö´ –í—ã–π—Ç–∏ —Å –∞—Ñ–∫ üö´", 
										"callback": self.button_cancel,
									}
								]
							]
						)

					else:
						await self.inline.form(
							message=message, 
							text=self._afk_custom_text(), 
							reply_markup=[
								[
									{
										"text": self.config['custom_button'][0],
										"url": self.config['custom_button'][1],
									}
								],
								[
									{
										"text": "üö´ –í—ã–π—Ç–∏ —Å –∞—Ñ–∫ üö´", 
										"callback": self.button_cancel,
									}
								]
							]
						)

	async def button_cancel(self, call: InlineCall):
		self._db.set(__name__, "afk", False)
		self._db.set(__name__, "gone", None)
		self._db.set(__name__, "ratelimit", [])
		change_bio = self._db.get(__name__, "change_bio")
		change_name = self._db.get(__name__, "change_name")
		self._db.set(__name__, 'about', about)
		self._db.set(__name__, "ln", ls)
		await self.allmodules.log("TxAF–ö now not working.")

		if change_name == False and change_bio == False:
			await call.edit(self.strings["bt_off_afk"])
			return

		if change_name == True:
			ls = self._db.get(__name__, 'ln')
			await message.client(UpdateProfileRequest(last_name=ls))

		if change_bio == True:
			try:
				await self._client(UpdateProfileRequest(about=f'{self.db.get(__name__, "about")}'))
			except:
				await self._.client(UpdateProfileRequest(about="@AstroOfftop - –ª—É—á—à–∏–π —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è."))

		await call.edit(self.strings["bt_off_afk"])

	async def settings(self, call: InlineCall):
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ–∏–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä—ã—Ç—å",
						"action": 'close'
					}
				]
			]
		)

	async def settings_name(self, call: InlineCall):
		await call.edit(
			text=(
				f'<b>üìñ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞</b>\n\n'
				+ '<i>‚ùî –•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã, —á—Ç–æ–±—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ê–§–ö —Ä–µ–∂–∏–º –∫ –≤–∞—à–µ–º—É '
				+ '–Ω–∏–∫—É –¥–æ–±–∞–≤–ª—è–ª—Å—è –ø—Ä–µ—Ñ–∏–∫—Å <code>| afk.</code> ?</i>\n\n'
				+ '‚ÑπÔ∏è –¢–∞–∫ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ <b>–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å</b>, '
				+ '<b>–æ—Ç–º–µ–Ω–∏—Ç—å</b> –∏–ª–∏ <b>—Å–¥–µ–ª–∞—Ç—å</b> –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ <b>–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</b>'
			),
			reply_markup=[
				[
					{
						'text': '‚úÖ –î–∞',
						"callback": self.name_yes
					},
					{
						"text": 'üö´ –ù–µ—Ç',
						"callback": self.name_no
					}
				],
				[{'text': '‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'callback': self.settings}]
			]
		)
	async def name_yes(self, call: InlineCall):
		self._db.set(__name__, 'change_name', True)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ–∏–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä—ã—Ç—å",
						"action": 'close'
					}
				]
			]
		)
	async def name_no(self, call: InlineCall):
		self._db.set(__name__, 'change_name', False)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ–∏–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä—ã—Ç—å",
						"action": 'close'
					}
				]
			]
		)
	async def settings_about(self, call: InlineCall):
		if self.config['feedback_bot'] == None:
			text = (
				f'üìñ <b>–°–º–µ–Ω–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏</b>'
				+ '\n\n‚ùî <b>–•–æ—Ç–∏—Ç–µ</b> –ª–∏ –í—ã, —á—Ç–æ–±—ã –ø—Ä–∏ <b>–≤—Ö–æ–¥–µ –≤ –ê–§–ö</b> —Ä–µ–∂–∏–º –í–∞—à–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏—è <b>–º–µ–Ω—è–ª–∞—Å—å</b>'
				+ '  –Ω–∞ "<code>–ù–∞—Ö–æ–∂—É—Å—å –≤ –∞—Ñ–∫</code>"?\n\n'
				+ '‚ÑπÔ∏è –¢–∞–∫ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ <b>–∏–∑–º–µ–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é</b> –≤ <b>–∫–æ–Ω—Ñ–∏–≥–µ</b>. '
				+ '–ú–æ–∂–Ω–æ <b>–æ—Ç–º–µ–Ω–∏—Ç—å</b> –∏–ª–∏ <b>—Å–¥–µ–ª–∞—Ç—å</b> –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ <b>–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</b>'
			)
		else:
			text = (
				f'üìñ <b>–°–º–µ–Ω–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏</b>'
				+ '\n\n‚ùî <b>–•–æ—Ç–∏—Ç–µ</b> –ª–∏ –í—ã, —á—Ç–æ–±—ã –ø—Ä–∏ <b>–≤—Ö–æ–¥–µ –≤ –ê–§–ö</b> —Ä–µ–∂–∏–º '
				+ '–í–∞—à–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏—è <b>–º–µ–Ω—è–ª–∞—Å—å</b> –Ω–∞  "<code>–ù–µ—Ç, –Ω–∞ –º–µ—Å—Ç–µ –Ω–∞—Ö–æ–∂—É—Å—å –≤ –∞—Ñ–∫</code><code>.'
				+ f' –°–≤—è–∑—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ @{self.config["feedback_bot"]}</code>"?\nü§ñ <b>–ë–æ—Ç –¥–ª—è —Å–≤—è–∑–∏</b>: <code>@{self.config["feedback_bot"]}</code>\n\n'
				+ '‚ÑπÔ∏è –¢–∞–∫ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ <b>–∏–∑–º–µ–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é</b> –≤ <b>–∫–æ–Ω—Ñ–∏–≥–µ</b>. '
				+ '–ú–æ–∂–Ω–æ <b>–æ—Ç–º–µ–Ω–∏—Ç—å</b> –∏–ª–∏ <b>—Å–¥–µ–ª–∞—Ç—å</b> –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ <b>–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</b>'
			)
		await call.edit(
			text=text,
			reply_markup=[
				[
					{
						'text': '‚úÖ –î–∞',
						"callback": self.bio
					},
					{
						"text": 'üö´ –ù–µ—Ç',
						"callback": self.bio_n
					}
				],
				[{'text': '‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'callback': self.settings}]
			]
		)
	async def bio(self, call: InlineCall):
		self._db.set(__name__, 'change_bio', True)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ–∏–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä—ã—Ç—å",
						"action": 'close'
					}
				]
			]
		)
	async def bio_n(self, call: InlineCall):
		self._db.set(__name__, 'change_bio', False)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ–∏–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä—ã—Ç—å",
						"action": 'close'
					}
				]
			]
		)

	def get_afk(self):
		return self._db.get(__name__, "afk", False)