#               _             __  __           _       _           
#     /\       | |           |  \/  |         | |     | |          
#    /  \   ___| |_ _ __ ___ | \  / | ___   __| |_   _| | ___  ___ 
#   / /\ \ / __| __| '__/ _ \| |\/| |/ _ \ / _` | | | | |/ _ \/ __|
#  / ____ \\__ \ |_| | | (_) | |  | | (_) | (_| | |_| | |  __/\__ \
# /_/    \_\___/\__|_|  \___/|_|  |_|\___/ \__,_|\__,_|_|\___||___/
#
#                ¬© Copyright 2022

#      https://t.me/Den4ikSuperOstryyPer4ik
#                      and
#             https://t.me/ToXicUse

#       üîí Licensed under the GNU AGPLv3
#    https://www.gnu.org/licenses/agpl-3.0.html
# scope: hikka_only
# meta developer: @AstroModules
# meta pic: https://img.icons8.com/clouds/500/000000/lock-2.png
# meta banner: https://i.imgur.com/rJScJY9.jpeg

import random
from .. import loader, utils
from telethon.tl.types import Message
import logging
from ..inline.types import InlineCall
logger = logging.getLogger(__name__)
@loader.tds
class RandomGeneratePasswordMod(loader.Module):
    """
    üá∑üá∫ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è/–ø–∏–Ω-–∫–æ–¥–∞
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥
    üá∫üá∏ Random password/pincode generator
    You can configure the generator through the config
    """

    strings = {
        "name": "RandomPasswordGenerator",
        "_cfg_doc_pass_length": "set password length (in number of characters)",
        "_cfg_doc_pin_code_length": "set pincode length (in number of characters)",
        "_cfg_doc_simbols_in_pass": "Will there be additional characters in the generated password (+-*!&$#?=@<>)?",
        "what_to_generate": "üÜóWhat should be generated?",
        "new_random_pass": "üî£ new random password üÜï",
        "new_random_pincode": "üî¢ new random PIN-code üÜï",
        "pass": "<b>üÜï Your new password in {} characters:\n<code>{}</code></b>",
        "pincode": "<b>üÜï Your new pincode in {} characters:\n<code>{}</code></b>", 
        "menu": "üíª Menu",
        "close": "üö´ Close"
    }

    strings_ru = {
        "_cfg_doc_pass_length": "–≤—ã—Å—Ç–∞–≤—å—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è(–≤ –∫–æ–ª-–≤–µ —Å–∏–º–≤–æ–ª–æ–≤)",
        "_cfg_doc_pin_code_length": "–≤—ã—Å—Ç–∞–≤—å—Ç–µ –¥–ª–∏–Ω—É –ü–∏–Ω-–ö–æ–¥–∞(–≤ –∫–æ–ª-–≤–µ —Å–∏–º–≤–æ–ª–æ–≤)",
        "_cfg_doc_simbols_in_pass": "–ö–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–∞—Ä–æ–ª–µ?",
        "what_to_generate": "üÜó –ß—Ç–æ –Ω–∞–¥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",
        "_cmd_doc_generatorcfg": "‚Äî>–∫–æ–Ω—Ñ–∏–≥ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è",
        "_cmd_doc_igenerator": "‚Äî>—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å/–ø–∏–Ω-–∫–æ–¥",
        "new_random_pass": "üî£ –ù–æ–≤—ã–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–∞—Ä–æ–ª—å üÜï",
        "new_random_pincode": "üî¢ –ù–æ–≤—ã–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π PIN-–∫–æ–¥ üÜï",
        "pass": "<b>üÜï –í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ {} —Å–∏–º–≤–æ–ª–æ–≤:\n<code>{}</code></b>",
        "pincode": "<b>üÜï –í–∞—à –Ω–æ–≤—ã–π –ø–∏–Ω-–∫–æ–¥ –≤ {} —Å–∏–º–≤–æ–ª–æ–≤:</b>\n<code>{}</code>",
        "menu": "üíª –ú–µ–Ω—é",
        "close": "üö´ –ó–∞–∫—Ä—ã—Ç—å",
    }

    async def client_ready(self, client, db):
        self.db = db
        self.client = client

        try:
            post = (await client.get_messages("AstroModules", ids=[92]))[0]
            post_two = (await client.get_messages("AstroModules", ids=[93]))[0]
            reactions = ["‚ù§Ô∏è‚Äçüî•", "ü§©", "üåö", "üî•"]
            reaction = r.choice(reactions)
            reaction_two = r.choice(reactions)
            await post.react(reaction)
            await post_two.react(reaction_two)
        except Exception:
            logger.info("Can't react to t.me/AstroModules :(")

    async def generatorcfgcmd(self, message: Message):
        """‚Äî>config for this module"""
        name = self.strings("name")
        await self.allmodules.commands["config"](
            await utils.answer(message, f"{self.get_prefix()}config {name}")
        )

    def __init__(self):
        self._ratelimit = []
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "password_length",
                10,
                doc=lambda: self.strings("_cfg_doc_pass_length"),
                validator=loader.validators.Integer(minimum=6),
            ),
            loader.ConfigValue(
                "pincode_length",
                4,
                doc=lambda: self.strings("_cfg_doc_pin_code_length"),
                validator=loader.validators.Integer(minimum=4),
            ),
            loader.ConfigValue(
                "symbols_in_pass",
                "+-*!&$?=@<>abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
                doc=lambda: self.strings("_cfg_doc_simbols_in_pass"),
            )
        )
    async def igeneratorcmd(self, message: Message):
        """‚Äî>generate random password/pin"""
        await self.inline.form(
            self.strings("what_to_generate"),
            reply_markup=[
                [{"text": self.strings("new_random_pass"), "callback": self.new_random_pass}],
                [{"text": self.strings("new_random_pincode"), "callback": self.new_random_pincode}],
                [{"text": self.strings("close"), "action": "close"}],
            ],
            message=message,
        )

    async def igenerator(self, call: InlineCall):
        await call.edit(
            self.strings("what_to_generate"),
            reply_markup=[
                [{"text": self.strings("new_random_pass"), "callback": self.new_random_pass}],
                [{"text": self.strings("new_random_pincode"), "callback": self.new_random_pincode}],
                [{"text": self.strings("close"), "action": "close"}],
            ],
        )

    async def new_random_pass(self, call: InlineCall):
        symbols_in_pass = self.config["symbols_in_pass"]
        password_length = self.config["password_length"]
        length = int(password_length)
        password = ''
        for i in range(length):
            password += random.choice(symbols_in_pass)
            await call.edit(
                self.strings["pass"].format(password_length, password),
                reply_markup=[
                [{"text": self.strings("menu"), "callback": self.igenerator}],
                [{"text": self.strings("close"), "action": "close"}]
                ]
            )

    async def new_random_pincode(self, call: InlineCall):
        pincode_length = self.config["pincode_length"]
        chars = '1234567890'
        length = int(self.config["pincode_length"])
        pincode = ''
        for i in range(length):
            pincode += random.choice(chars)
            await call.edit(
                self.strings["pincode"].format(pincode_length, pincode),
                reply_markup=[
                [{"text": self.strings("menu"), "callback": self.igenerator}],
                [{"text": self.strings("close"), "action": "close"}]
                ]
            )